<?php

namespace backend\models;

use common\models\CatManuf;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "manufacturer".
 *
 * @property int $id
 * @property string $title
 * @property string $url
 * @property string $img
 * @property string $cat_name
 * @property string $cat_id
 */
class Manufacturer extends \yii\db\ActiveRecord
{
    public $file;
    public $categories;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'manufacturer';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
//            [['title', 'url', 'img', 'cat_name'], 'required'],
            [['title'], 'required'],
            [['title', 'url', 'img', 'cat_name'], 'string', 'max' => 80],
            [['cat_id'], 'integer'],
            [['file'], 'image'],
            [['categories'], 'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'url' => 'Url',
            'img' => 'Img',
            'cat_name' => 'Cat Name',
            'cat_id' => 'Cat id',
            'file' => 'image',
            'categories' => 'Категории'
        ];
    }

    public function getFolder()
    {
        return Yii::getAlias('@image') . '/manufacturers/';
    }


    //--------//
    public function getCategoryManufactures()
    {
        return $this->hasMany(CatManuf::className(), ['manuf_id' => 'id']);
    }

    public function getCategory()
    {
        return $this->hasMany(\common\models\Category::className(), ['id' => 'cat_id'])->via('categoryManufactures');
    }

//    public function getManufactur(){
//        return $this->hasOne(Manufacturer::class, ['id'=>'manuf_id']);
//    }

    public function deleteImage()
    {

        if (file_exists($this->getFolder() . $this->img)) {
            unlink($this->getFolder() . $this->img);
        }
    }

    public function beforeSave($insert)
    {

        if ($file = UploadedFile::getInstance($this, 'file')) {

            if (!file_exists($this->getFolder())) {
                FileHelper::createDirectory($this->getFolder());
            }

            if (!empty($this->img) && $this->img != null && file_exists($this->getFolder() . $this->img)) {
                unlink($this->getFolder() . $this->img);
            }

            $this->img = strtotime('now') . '_' . \Yii::$app->getSecurity()->generateRandomString(6) . '.' . $file->extension;

            $file->saveAs($this->getFolder() . $this->img);

        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->categories = $this->category;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $arr = ArrayHelper::map($this->category,'id','id');
        foreach ($this->categories as $one) {
            if (!in_array($one, $arr)){
                $model = new CatManuf();
                $model->manuf_id = $this->id;
                $model->cat_id = $one;
                $model->save();
            }
            if(isset($arr[$one])){
                unset($arr[$one]);
            }
        }
        CatManuf::deleteAll(['cat_id'=>$arr]);

    }


    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


}
